#!/usr/bin/env python3

from gi.repository import GObject, GLib, Gio, Gdk, Gtk, Vte, Pango
import neovim
import os
import re
from glob import glob
from uuid import uuid4
from threading import Thread
from functools import partial


class NeovimWindow(Gtk.ApplicationWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.switcher = Gtk.StackSwitcher()
        self.set_titlebar(Gtk.HeaderBar(show_close_button=True,
                                        custom_title=self.switcher))
        self.notebook = Gtk.Notebook(parent=self,
                                     show_tabs=False,
                                     show_border=False)
        self.terminal = Vte.Terminal(is_focus=True,
                                     has_focus=True,
                                     scrollback_lines=0,
                                     scroll_on_output=False,
                                     scroll_on_keystroke=True,
                                     rewrap_on_resize=False)
        self.notebook.append_page(self.terminal)
        self.terminal.connect('child-exited', lambda *_: self.close())
        for key in ('bufs', 'tabs', 'font', 'color'):
            getattr(self, f'_reset_{key}')()

    def spawn(self, addr, argv):
        def callback(*_):
            self.emit('nvim-setup', neovim.attach('socket', path=addr))
            self.terminal.disconnect(once)
        once = self.terminal.connect('cursor-moved', callback)
        self.terminal.spawn_sync(Vte.PtyFlags.DEFAULT,
                                 None,
                                 ['nvim', *argv],
                                 [f'NVIM_LISTEN_ADDRESS={addr}'],
                                 GLib.SpawnFlags.SEARCH_PATH,
                                 None,
                                 None,
                                 None)

    @GObject.Signal(flags=GObject.SignalFlags.RUN_LAST)
    def nvim_setup(self, nvim: object):
        for key in ('bufs', 'tabs', 'font', 'color'):
            getattr(self, f'_setup_{key}')(nvim)
        nvim.subscribe('Gui')
        nvim.command('ru! ginit.vim', async=True)
        nvim.command('do BufEnter', async=True)
        Thread(daemon=True, target=nvim.run_loop,
               args=(print, partial(self.emit, 'nvim-notify', nvim))).start()

    @GObject.Signal(flags=GObject.SignalFlags.RUN_LAST)
    def nvim_notify(self, nvim: object, event: str, args: object):
        if event == 'Gui' and args[0] == 'Bufs':
            return GLib.idle_add(self._update_bufs, nvim, *args[1:])
        if event == 'Gui' and args[0] == 'Tabs':
            return GLib.idle_add(self._update_tabs, nvim, *args[1:])
        if event == 'Gui' and args[0] == 'Font':
            return GLib.idle_add(self._update_font, nvim, *args[1:])
        if event == 'Gui' and args[0] == 'Color':
            return GLib.idle_add(self._update_color, nvim, *args[1:])

    def _setup_bufs(self, nvim):
        nvim.command(re.sub(r'\n +', ' ', f"""
        au BufEnter,TermOpen,TextChanged,TextChangedI,BufWritePost *
        cal rpcnotify({nvim.channel_id}, 'Gui', 'Bufs',
            map(filter(range(1, bufnr('$')),
                       'bufloaded(v:val) && buflisted(v:val)'),
                '[v:val,
                  fnamemodify(pathshorten(bufname(v:val)), ":~:."),
                  getbufvar(v:val, "&mod")]'),
            bufnr("%"))
        """), async=True)

    def _setup_tabs(self, nvim):
        nvim.options['showtabline'] = 0
        nvim.command(re.sub(r'\n +', ' ', f"""
        au BufEnter,TabEnter,TabLeave,TabNew,TabClosed *
        cal rpcnotify({nvim.channel_id}, 'Gui', 'Tabs',
            map(range(1, tabpagenr('$')),
                '[v:val,
                  fnamemodify(pathshorten(bufname(get(tabpagebuflist(v:val),
                                                  0, 0))),
                              ":~:.")]'),
            tabpagenr())
        """), async=True)

    def _setup_font(self, nvim):
        nvim.command(re.sub(r'\n +', ' ', f"""
        com! -nargs=? -bang GuiFont
        cal rpcnotify({nvim.channel_id}, 'Gui', 'Font',
            '<args>')
        """), async=True)

    def _setup_color(self, nvim):
        nvim.command(re.sub(r'\n +', ' ', f"""
        au ColorScheme *
        cal rpcnotify({nvim.channel_id}, 'Gui', 'Color',
            synIDattr(hlID('Normal'), 'bg'), &bg == 'dark')
        """), async=True)
        nvim.command('do ColorScheme', async=True)

    def _update_bufs(self, nvim, buflist, bufcurr):
        for child in self.switcher.get_children():
            self.switcher.remove(child)
        for id, name, modified in buflist:
            ico = (Gtk.Image(icon_name='document-edit-symbolic')
                   if modified else None)
            btn = Gtk.ToggleButton(name,
                                   parent=self.switcher,
                                   active=id == bufcurr,
                                   image=ico,
                                   always_show_image=True)
            btn.connect('clicked',
                        lambda _, id: nvim.command(f'b {id}', async=True),
                        id)
        self.switcher.show_all()

    def _update_tabs(self, nvim, tablist, tabcurr):
        for _ in range(self.notebook.get_n_pages()):
            self.notebook.remove_page(-1)
        for id, name in tablist:
            self.notebook.append_page((self.terminal
                                       if id == tabcurr
                                       else Gtk.Box()),
                                      Gtk.Label(name))
        for child in self.notebook.get_children():
            self.notebook.child_set_property(child, 'tab-expand', True)
        self.notebook.set_current_page(self.notebook.page_num(self.terminal))
        self.notebook.set_show_tabs(len(tablist) > 1)
        self.notebook.show_all()
        self.terminal.grab_focus()

    def _update_font(self, nvim, value):
        family, *attrs = value.split(':')
        font = Pango.FontDescription(string=family.replace('_', ' '))
        for a in attrs:
            if a[0] == 'h':
                font.set_size(float(a[1:]) * Pango.SCALE)
            if a[0] == 'b':
                font.set_weight(Pango.Weight.BOLD)
            if a[0] == 'i':
                font.set_style(Pango.Style.ITALIC)
        self.terminal.set_font(font)

    def _update_color(self, nvim, bg_color, is_dark):
        if bg_color != 'None':
            rgba = Gdk.RGBA()
            rgba.parse(bg_color)
            self.terminal.set_color_background(rgba)
        else:
            self._reset_color()
        self.get_settings().props.gtk_application_prefer_dark_theme = is_dark

    def _reset_bufs(self):
        pass

    def _reset_tabs(self):
        pass

    def _reset_font(self):
        giosss = Gio.SettingsSchemaSource.get_default()
        schema = giosss.lookup('org.gnome.desktop.interface', True)
        if not schema:
            return
        settings = Gio.Settings(settings_schema=schema)
        value = settings.get_string('monospace-font-name')
        self.terminal.set_font(Pango.FontDescription(string=value))

    def _reset_color(self):
        sctx = self.terminal.get_style_context()
        rgba = sctx.get_background_color(sctx.get_state())
        self.terminal.set_color_background(rgba)


class NeovimApplication(Gtk.Application):

    NAME = 'nvim-pygtk3'

    def __init__(self, *args, **kwargs):
        super().__init__(*args,
                         application_id=f'org.{NeovimApplication.NAME}',
                         flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE,
                         **kwargs)
        path = os.path.join(GLib.get_user_config_dir(),
                            NeovimApplication.NAME, '*.py')
        self.scripts = [compile(open(file).read(), file, 'exec')
                        for file in glob(path)]

    def do_command_line(self, command_line):
        window = NeovimWindow(application=self)
        self._configure(window)
        window.show_all()
        window.present()
        window.spawn(os.path.join(GLib.get_tmp_dir(), f'nvim-{uuid4()}'),
                     command_line.get_arguments())

    def _configure(self, window):
        def connect(obj, sig):
            return lambda fun: obj.connect(sig, lambda obj, *args: fun(*args))
        for script in self.scripts:
            exec(script, {'window': window, 'connect': connect})


if __name__ == '__main__':
    import sys
    NeovimApplication().run(sys.argv[1:])
