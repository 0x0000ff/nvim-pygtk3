#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GLib, Vte
import neovim
import random
import sys
import threading

class NeovimWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title=GLib.get_prgname(), icon_name='vim')
        self.vte = Vte.Terminal(scrollback_lines=0,
                                scroll_on_output=False,
                                scroll_on_keystroke=True,
                                rewrap_on_resize=True)
        self.vte.set_mouse_autohide(True)
        self.add(self.vte)
        self.header = Gtk.HeaderBar(title=self.get_title(),
                                    show_close_button=True)
        self.set_titlebar(self.header)

    def start(self):
        port = random.randint(10000, 65535)
        self.vte.spawn_sync(Vte.PtyFlags.DEFAULT,
                            None,
                            ['/usr/bin/nvim'] + sys.argv[1:],
                            [
                                'NVIM_LISTEN_ADDRESS=127.0.0.1:{}'.format(port),
                                'NVIM_TUI_ENABLE_CURSOR_SHAPE=1',
                                'NVIM_TUI_ENABLE_TRUE_COLOR=1',
                            ],
                            GLib.SpawnFlags.DEFAULT,
                            None,
                            None,
                            None)
        self.vim = neovim.attach('tcp', port=port)
        self.vte.connect('child-exited', Gtk.main_quit)
        self.connect('delete-event', Gtk.main_quit)
        self.show_all()
        threading.Thread(target=self._nvim_start, daemon=True).start()
        Gtk.main()

    def _nvim_start(self):
        bgr = Gdk.RGBA()
        bgr.parse(self.vim.eval('synIDattr(hlID("Normal"),"bg")'))
        self.vte.set_color_background(bgr)
        self.vim.command('au TextChanged,InsertLeave,BufEnter,BufLeave,BufWrite,TermClose * call rpcnotify({}, "a")'.format(self.vim.channel_id))
        self.vim.subscribe('a')
        self._nvim_event_loop()

    def _nvim_event_loop(self):
        while self.vim.next_message() is not None:
            GLib.idle_add(self._nvim_refresh_buffers, self._nvim_get_buffers())

    def _nvim_get_buffers(self):
        return [(self.vim.call('pathshorten', self.vim.call('fnamemodify', b.name, ':~:.')),
                 self.vim.current.buffer == b,
                 self.vim.call('getbufvar', b.handle, '&mod'))
                for b in sorted(self.vim.buffers, key=lambda b: b.handle, reverse=True)
                if b.name is not ''
                and self.vim.call('buflisted', b.handle)
                and self.vim.call('bufexists', b.handle)]

    def _nvim_refresh_buffers(self, buffers):
        if len(buffers) is 0:
            self.header.set_custom_title(None)
            return
        ss = Gtk.StackSwitcher()
        for name, current, modified in buffers:
            btn = Gtk.ToggleButton(name,
                                   active=current,
                                   image=Gtk.Image(icon_name='edit') if modified else None,
                                   always_show_image=modified)
            ss.pack_end(btn, True, True, 0)
        self.header.set_custom_title(ss)
        self.header.show_all()


if __name__ == '__main__':
    GLib.set_prgname('Neovim')
    NeovimWindow().start()
